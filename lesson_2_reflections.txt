1. What happens when you initialize a repository? Why do you need to do it?
In the initialization I create a new hidden folder which will probably contain all the commits and the meta-data associated. In this way Git can recognize that there's a repository. If I didn't it, I wouldn't be able to work with commits and repositories because Git wouldn't know where to save all the informations associated to the many commits I'm going to create.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is a different place where files to be committed are put before being actually committed. Maybe it isn't a real folder, but only a file containing the names of the files to be committed. I think it's a pretty smart feature because I can choose which files should be committed; I can choose which files in the folder should be committed; moreover, if I had changed only some files, I can commit only them and not the other untouched files. At present, I don't know whether it's better then committing every single file; it could be for hard drive space reasons and also for git diff output reason. Anyway, thinking about which files to commit before committing it's a good idea.

3. How can you use the staging area to make sure you have one commit per logical change?
In the staging area I can check with the commands git diff and git diff --staged what I'm changing and which files I'm going to commit. So I'm sure of what I'm committing and whether there's only a logical change.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches can be useful when I want to make new changes which could affect the overall way of working of the code; or when I want to implement new feature of which I'm not very sure; or generally when I don't want to impact on my existing and properly working code with any radical change. Branches can also be useful when I'm working on something new and I find a bug in what should be the working version: I can create a new branch with the fixed bug, test it and then merge it with my master project, which is supposed to be working.

5. How do the diagrams help you visualize the branch structure?
Diagrams help me in comprehending when I created a new branch, which commits I did and the overall feature of a branch by reading commits' messages. The visualization is useful to get the overall idea of my project. However logging only a part of the whole structure of my project would be useful.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches results in merging the code of the branches' tips while comparing with the parent commit from which the branch originated (the first common parent commit). If a line is present in both branches, it will be kept; if a line is not present in a branch, but it was in the parent and the other branch, it will be deleted; if a line is present in a branch but not in the parent nor in the other branch, it will be added.
The representation in the diagram show how we are working: some code is getting unified with other code, so the new commit will result in a mix of the code. Choosing then on which branch saving the new commit is very important.
